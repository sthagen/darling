/*
 This file is part of Darling.

 Copyright (C) 2020 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _CoreUtils_H_
#define _CoreUtils_H_

// according to mdns.c in mDNSResponder, it seems that this header is included by CoreUtils
#include <nw/nw.h>

// this one too
#include <AssertMacros.h>

#include "CommonServices.h"
#include "DebugServices.h"

#ifdef __OBJC__
#import <Foundation/Foundation.h>

#import <CoreUtils/AVAudioPlayerDelegate.h>
#import <CoreUtils/AVVoiceControllerRecordDelegate.h>
#import <CoreUtils/CAAnimationDelegate.h>
#import <CoreUtils/CBCentralManagerDelegate.h>
#import <CoreUtils/CBPeripheralDelegate.h>
#import <CoreUtils/CBPeripheralManagerDelegate.h>
#import <CoreUtils/CUActivatable.h>
#import <CoreUtils/CUByteCodable.h>
#import <CoreUtils/CUDictionaryCodable.h>
#import <CoreUtils/CUEnvironmentable.h>
#import <CoreUtils/CUMessageSessionXPCClientInterface.h>
#import <CoreUtils/CUMessageSessionXPCServerInterface.h>
#import <CoreUtils/CUMessageable.h>
#import <CoreUtils/CUPairingDaemonXPCInterface.h>
#import <CoreUtils/CUPairingManagerXPCInterface.h>
#import <CoreUtils/CUReadWriteRequestable.h>
#import <CoreUtils/CUTDSXPCClientInterface.h>
#import <CoreUtils/CUTDSXPCDaemonInterface.h>
#import <CoreUtils/CUXPCCodable.h>
#import <CoreUtils/CWEventDelegate.h>
#import <CoreUtils/CWInternalEventDelegate.h>
#import <CoreUtils/CXCallObserverDelegate.h>
#import <CoreUtils/CoreTelephonyClientDelegate.h>
#import <CoreUtils/FMFSessionDelegate.h>
#import <CoreUtils/HMAccessoryDelegate.h>
#import <CoreUtils/HMAccessoryDelegatePrivate.h>
#import <CoreUtils/HMHomeDelegate.h>
#import <CoreUtils/HMHomeDelegatePrivate.h>
#import <CoreUtils/HMHomeManagerDelegate.h>
#import <CoreUtils/HMHomeManagerDelegatePrivate.h>
#import <CoreUtils/HMMediaObjectDelegate.h>
#import <CoreUtils/HMMediaSystemDelegate.h>
#import <CoreUtils/HMUserDelegatePrivate.h>
#import <CoreUtils/IDSServiceDelegate.h>
#import <CoreUtils/IDSSessionDelegate.h>
#import <CoreUtils/NSStreamDelegate.h>
#import <CoreUtils/NSURLSessionDelegate.h>
#import <CoreUtils/NSURLSessionDownloadDelegate.h>
#import <CoreUtils/NSXPCListenerDelegate.h>
#import <CoreUtils/UNUserNotificationCenterDelegate.h>
#import <CoreUtils/WiFiAwareDataSessionDelegate.h>
#import <CoreUtils/WiFiAwarePublisherDelegate.h>
#import <CoreUtils/WiFiAwareSubscriberDelegate.h>
#import <CoreUtils/CAAnimationDelegateBlockHelper.h>
#import <CoreUtils/CUAppleIDClient.h>
#import <CoreUtils/CUAudioRequest.h>
#import <CoreUtils/CUAudioPlayer.h>
#import <CoreUtils/CUBitCoderDecryptRequest.h>
#import <CoreUtils/CUBitCoderDecryptResponse.h>
#import <CoreUtils/CUBitCoderEncryptRequest.h>
#import <CoreUtils/CUBitCoder.h>
#import <CoreUtils/CUBLEAdvertiser.h>
#import <CoreUtils/CUBLEConnection.h>
#import <CoreUtils/CUBLEScanner.h>
#import <CoreUtils/CUBLEDevice.h>
#import <CoreUtils/CUBLEServer.h>
#import <CoreUtils/CUBluetoothClassicConnection.h>
#import <CoreUtils/CUBluetoothFindDeviceRequest.h>
#import <CoreUtils/CUBluetoothClient.h>
#import <CoreUtils/CUBluetoothDevice.h>
#import <CoreUtils/CUBluetoothScalablePipe.h>
#import <CoreUtils/CUBonjourAdvertiser.h>
#import <CoreUtils/CUBonjourBrowser.h>
#import <CoreUtils/CUBonjourDevice.h>
#import <CoreUtils/CUCoalescer.h>
#import <CoreUtils/CUConnection.h>
#import <CoreUtils/CUDashboardClient.h>
#import <CoreUtils/CUDashboardServer.h>
#import <CoreUtils/CUEndpoint.h>
#import <CoreUtils/CUEnvironment.h>
#import <CoreUtils/CUFileClient.h>
#import <CoreUtils/CUFileServerSession.h>
#import <CoreUtils/CUFileServer.h>
#import <CoreUtils/CUFileItem.h>
#import <CoreUtils/CUFileQuery.h>
#import <CoreUtils/CUFileResponse.h>
#import <CoreUtils/CUHomeKitResolvableAccessory.h>
#import <CoreUtils/CUHomeKitFindPairedPeerContext.h>
#import <CoreUtils/CUHomeKitManager.h>
#import <CoreUtils/CUIDSReadRequest.h>
#import <CoreUtils/CUIDSWriteRequest.h>
#import <CoreUtils/CUIDSSession.h>
#import <CoreUtils/CUReadRequest.h>
#import <CoreUtils/CUWriteRequest.h>
#import <CoreUtils/CUKeychainManager.h>
#import <CoreUtils/CUKeychainItem.h>
#import <CoreUtils/CUKeyValueStoreReader.h>
#import <CoreUtils/CUKeyValueStoreWriter.h>
#import <CoreUtils/CULiveAudioServer.h>
#import <CoreUtils/CULiveAudioServerSession.h>
#import <CoreUtils/CULiveAudioSession.h>
#import <CoreUtils/CULiveAudioPeerSession.h>
#import <CoreUtils/CULogHandle.h>
#import <CoreUtils/CUMessageRequestEntry.h>
#import <CoreUtils/CUMessageSession.h>
#import <CoreUtils/CUMessageSessionServer.h>
#import <CoreUtils/CUMessageSessionXPCConnection.h>
#import <CoreUtils/CUMFiDeviceDiscovery.h>
#import <CoreUtils/CUMFiReadRequest.h>
#import <CoreUtils/CUMFiWriteRequest.h>
#import <CoreUtils/CUMFiSession.h>
#import <CoreUtils/CUMobileDeviceMonitorContext.h>
#import <CoreUtils/CUMobileDeviceDiscovery.h>
#import <CoreUtils/CUMobileDevice.h>
#import <CoreUtils/CUMobileDeviceSession.h>
#import <CoreUtils/CUNANDataSession.h>
#import <CoreUtils/CUNANPublisher.h>
#import <CoreUtils/CUNANSubscriber.h>
#import <CoreUtils/CUNANEndpoint.h>
#import <CoreUtils/CUNetInterfaceMonitor.h>
#import <CoreUtils/CUNetLinkManager.h>
#import <CoreUtils/CUNetLinkEndpoint.h>
#import <CoreUtils/CUNetServiceAdvertiser.h>
#import <CoreUtils/CUNetServiceDiscovery.h>
#import <CoreUtils/CUNetServiceEndpoint.h>
#import <CoreUtils/CUNFCAdvertiser.h>
#import <CoreUtils/CUNFCScanner.h>
#import <CoreUtils/CUNFCDevice.h>
#import <CoreUtils/CUOSRecoveryProgressEvent.h>
#import <CoreUtils/CUOSRecoveryTarget.h>
#import <CoreUtils/CUPairingDaemon.h>
#import <CoreUtils/CUPairingXPCConnection.h>
#import <CoreUtils/CUPairingManager.h>
#import <CoreUtils/CUPairingIdentity.h>
#import <CoreUtils/CUPairedPeer.h>
#import <CoreUtils/CUPairingSession.h>
#import <CoreUtils/CUPairingStream.h>
#import <CoreUtils/CUPersistentTimer.h>
#import <CoreUtils/CUPowerSourceMonitor.h>
#import <CoreUtils/CUPowerSource.h>
#import <CoreUtils/CUPowerSourceLEDInfo.h>
#import <CoreUtils/CURangingSession.h>
#import <CoreUtils/CURangingMeasurement.h>
#import <CoreUtils/CURangingPeer.h>
#import <CoreUtils/CURangingSample.h>
#import <CoreUtils/CUReachabilityMonitor.h>
#import <CoreUtils/CURetrier.h>
#import <CoreUtils/CURunLoopThread.h>
#import <CoreUtils/CUServer.h>
#import <CoreUtils/CUSetupFlow.h>
#import <CoreUtils/CUSetupStep.h>
#import <CoreUtils/CUSetupStepPreflightWiFi.h>
#import <CoreUtils/CUSetupHandler.h>
#import <CoreUtils/CUSleepWakeMonitor.h>
#import <CoreUtils/CUState.h>
#import <CoreUtils/CUStateEvent.h>
#import <CoreUtils/CUStateMachine.h>
#import <CoreUtils/CUSystemMonitorImp.h>
#import <CoreUtils/CUSystemMonitor.h>
#import <CoreUtils/CUTCPConnection.h>
#import <CoreUtils/CUTCPServer.h>
#import <CoreUtils/CUTDSDaemon.h>
#import <CoreUtils/CUTDSXPCConnection.h>
#import <CoreUtils/CUTDSAgent.h>
#import <CoreUtils/CUTDSDevice.h>
#import <CoreUtils/CUTDSEndpoint.h>
#import <CoreUtils/CUTDSProvider.h>
#import <CoreUtils/CUTDSSeeker.h>
#import <CoreUtils/CUTDSSession.h>
#import <CoreUtils/CUUserNotificationSession.h>
#import <CoreUtils/CUVoiceRequest.h>
#import <CoreUtils/CUVoiceSession.h>
#import <CoreUtils/CUWACSession.h>
#import <CoreUtils/CUWiFiManager.h>
#import <CoreUtils/CUWiFiTrafficPeer.h>
#import <CoreUtils/CUWiFiScanner.h>
#import <CoreUtils/CUWiFiDevice.h>
#import <CoreUtils/CUXMLRPCClient.h>
#import <CoreUtils/CUXPCAgent.h>
#import <CoreUtils/CUXPCAgentConnection.h>
#import <CoreUtils/CoreUtilsNSSubrangeData.h>
#import <CoreUtils/NXClient.h>
#import <CoreUtils/TUTestState.h>
#endif

void* AES_CBCFrame_Final(void);
void* AES_CBCFrame_Init(void);
void* AES_CBCFrame_Update(void);
void* AES_CTR_Final(void);
void* AES_CTR_Init(void);
void* AES_CTR_Update(void);
void* AES_GCM_AddAAD(void);
void* AES_GCM_Decrypt(void);
void* AES_GCM_Encrypt(void);
void* AES_GCM_Final(void);
void* AES_GCM_FinalizeMessage(void);
void* AES_GCM_Init(void);
void* AES_GCM_InitEx(void);
void* AES_GCM_InitEx2(void);
void* AES_GCM_InitMessage(void);
void* AES_GCM_InitMessageEx(void);
void* AES_GCM_VerifyMessage(void);
void* ASL_LOG(void);
void* ASPrintF(void);
void* AWDLTrafficRegister(void);
void* AppendPrintF(void);
void* Apple80211Associate(void);
void* Apple80211Associate2(void);
void* Apple80211BindToInterface(void);
void* Apple80211Close(void);
void* Apple80211CopyAwdlPreferredChannels(void);
void* Apple80211CopyLeakyAPStatus(void);
void* Apple80211CopyRangingCapabilities(void);
void* Apple80211CopyValue(void);
void* Apple80211Disassociate(void);
void* Apple80211ErrToStr(void);
void* Apple80211EventMonitoringHalt(void);
void* Apple80211EventMonitoringInit(void);
void* Apple80211EventMonitoringInit2(void);
void* Apple80211EventSocketRef(void);
void* Apple80211GasRequest(void);
void* Apple80211Get(void);
void* Apple80211GetIfListCopy(void);
void* Apple80211GetInfoCopy(void);
void* Apple80211GetInterfaceNameCopy(void);
void* Apple80211GetPower(void);
void* Apple80211GetRangingPhyErrorString(void);
void* Apple80211GetVirtualIfListCopy(void);
void* Apple80211MaxLinkSpeed(void);
void* Apple80211MonitorEventsWithBlock(void);
void* Apple80211Open(void);
void* Apple80211Parse80211dIE(void);
void* Apple80211ParseAppleDeviceIE(void);
void* Apple80211ParseAppleIE(void);
void* Apple80211ParseAppleP2PIE(void);
void* Apple80211ParseAppleSWAPIE(void);
void* Apple80211ParseAppleiOSIE(void);
void* Apple80211ParseDSIE(void);
void* Apple80211ParseExtCapsIE(void);
void* Apple80211ParseHS20IE(void);
void* Apple80211ParseHT_Caps(void);
void* Apple80211ParseHT_IE(void);
void* Apple80211ParseInterworkingIE(void);
void* Apple80211ParseMobilityDomainIE(void);
void* Apple80211ParseP2PIE(void);
void* Apple80211ParseQBSSLoadIE(void);
void* Apple80211ParseRSNIE(void);
void* Apple80211ParseSES_IE(void);
void* Apple80211ParseSSIDIE(void);
void* Apple80211ParseVHT_Caps(void);
void* Apple80211ParseVhtCapsIE(void);
void* Apple80211ParseVhtOpIE(void);
void* Apple80211ParseWPAIE(void);
void* Apple80211ParseWPAPassword(void);
void* Apple80211ParseWPS_IE(void);
void* Apple80211RangeAsync(void);
void* Apple80211Scan(void);
void* Apple80211ScanAsync(void);
void* Apple80211ScanDynamic(void);
void* Apple80211Set(void);
void* Apple80211SetPower(void);
void* Apple80211StartMonitoringEvent(void);
void* Apple80211StopMonitoringEvent(void);
void* AppleAllocInitialReqFrm(void);
void* AppleParseGASInitialRequestFrame(void);
void* AsyncConnection_Connect(void);
void* AsyncConnection_ConnectEx(void);
void* AsyncConnection_ConnectSync(void);
void* AsyncConnection_ConnectSyncEx(void);
void* AsyncConnection_Release(void);
void* AsyncOperationQueueComplete(void);
void* AsyncOperationQueueCreate(void);
void* AsyncOperationQueueSchedule_b(void);
void* AsyncOperationQueueSetDispatchQueue(void);
void* AudioStreamCreate(void);
void* AudioStreamGetTypeID(void);
void* AudioStreamPrepare(void);
void* AudioStreamRampVolume(void);
void* AudioStreamSetInputCallback(void);
void* AudioStreamSetOutputCallback(void);
void* AudioStreamStart(void);
void* AudioStreamStop(void);
void* AudioStreamTest(void);
void* Base64Decode(void);
void* Base64DecodeCopy(void);
void* Base64EncodeCopyEx(void);
void* Base64EncodeEx(void);
void* Base64EncodeLinesCopyEx(void);
void* BitListString_Make(void);
void* BitListString_Parse(void);
void* BonjourAdvertiserCreate(void);
void* BonjourAdvertiserSetDispatchQueue(void);
void* BonjourAdvertiserSetDomain(void);
void* BonjourAdvertiserSetFlags(void);
void* BonjourAdvertiserSetInterfaceIndex(void);
void* BonjourAdvertiserSetInterfaceName(void);
void* BonjourAdvertiserSetLabel(void);
void* BonjourAdvertiserSetName(void);
void* BonjourAdvertiserSetP2P(void);
void* BonjourAdvertiserSetPort(void);
void* BonjourAdvertiserSetServiceType(void);
void* BonjourAdvertiserSetTXTRecord(void);
void* BonjourAdvertiserSetTrafficFlags(void);
void* BonjourAdvertiserStart(void);
void* BonjourAdvertiserStop(void);
void* BonjourAdvertiserUpdate(void);
void* BonjourBrowser_CopyDevices(void);
void* BonjourBrowser_Create(void);
void* BonjourBrowser_CreateEx(void);
void* BonjourBrowser_ReconfirmDevice(void);
void* BonjourBrowser_ReconfirmDeviceEx(void);
void* BonjourBrowser_SetDispatchQueue(void);
void* BonjourBrowser_SetEventHandler(void);
void* BonjourBrowser_SetEventHandlerBlock(void);
void* BonjourBrowser_Start(void);
void* BonjourBrowser_Stop(void);
void* BonjourDevice_CopyCFString(void);
void* BonjourDevice_CopyConnectionInfo(void);
void* BonjourDevice_CopyDNSNames(void);
void* BonjourDevice_GetBitListValue(void);
void* BonjourDevice_GetDNSName(void);
void* BonjourDevice_GetDeviceID(void);
void* BonjourDevice_GetInt64(void);
void* BonjourDevice_MergeInfo(void);
void* BonjourDevice_Reconfirm(void);
void* BonjourDevice_RemoveInterfaceInfo(void);
void* CADiffStats(void);
void* CAGetStats(void);
void* CFAppendPrintF(void);
void* CFAppendPrintV(void);
void* CFArrayAppendBytes(void);
void* CFArrayAppendInt64(void);
void* CFArrayApplyBlock(void);
void* CFArrayEnsureCreatedAndAppend(void);
void* CFArrayEnsureCreatedAndAppendCString(void);
void* CFArrayGetTypedValueAtIndex(void);
void* CFBinaryPlistStreamedCreateData(void);
void* CFBinaryPlistStreamedCreateDataEx(void);
void* CFBinaryPlistStreamedCreateWithBytes(void);
void* CFBinaryPlistStreamedCreateWithBytesEx(void);
void* CFBinaryPlistStreamedCreateWithBytesEx2(void);
void* CFBinaryPlistStreamedCreateWithData(void);
void* CFBinaryPlistStreamedWriteObject(void);
void* CFCopyCString(void);
void* CFCreateF(void);
void* CFCreateJSONData(void);
void* CFCreateObjectFromString(void);
void* CFCreateUUIDString(void);
void* CFCreateV(void);
void* CFCreateWithJSONBytes(void);
void* CFCreateWithPlistBytes(void);
void* CFDataCreateSubdataWithRangeNoCopy(void);
void* CFDataCreateWithANSIFile(void);
void* CFDataCreateWithFilePath(void);
void* CFDataGetEmpty(void);
void* CFDateCreateWithComponents(void);
void* CFDateGetComponents(void);
void* CFDictionaryApplyBlock(void);
void* CFDictionaryCopyCString(void);
void* CFDictionaryCopyKeys(void);
void* CFDictionaryCreateFromNameTypeValueArgList(void);
void* CFDictionaryCreateWithINIBytes(void);
void* CFDictionaryCreateWithTXTRecordBytes(void);
void* CFDictionaryGetCFDataOfLength(void);
void* CFDictionaryGetCGRect(void);
void* CFDictionaryGetCGSize(void);
void* CFDictionaryGetCString(void);
void* CFDictionaryGetData(void);
void* CFDictionaryGetDouble(void);
void* CFDictionaryGetEmpty(void);
void* CFDictionaryGetHardwareAddress(void);
void* CFDictionaryGetInt64(void);
void* CFDictionaryGetInt64Ranged(void);
void* CFDictionaryGetTypedValue(void);
void* CFDictionaryGetUUIDEx(void);
void* CFDictionaryMergeDictionary(void);
void* CFDictionarySetCGRect(void);
void* CFDictionarySetCGSize(void);
void* CFDictionarySetCString(void);
void* CFDictionarySetData(void);
void* CFDictionarySetDouble(void);
void* CFDictionarySetHardwareAddress(void);
void* CFDictionarySetInt64(void);
void* CFDictionarySetNumber(void);
void* CFDictionarySetUUIDString(void);
void* CFGetCString(void);
void* CFGetData(void);
void* CFGetDouble(void);
void* CFGetHardwareAddress(void);
void* CFGetInt64(void);
void* CFGetInt64Ranged(void);
void* CFGetTypedObject(void);
void* CFNumberCreateInt64(void);
void* CFNumberGetObject(void);
void* CFObjectControlAsync(void);
void* CFObjectControlAsyncF(void);
void* CFObjectControlSync(void);
void* CFObjectControlSyncF(void);
void* CFObjectCopyBytes(void);
void* CFObjectCopyCString(void);
void* CFObjectCopyProperty(void);
void* CFObjectCopyTypedValue(void);
void* CFObjectGetBytes(void);
void* CFObjectGetCString(void);
void* CFObjectGetDouble(void);
void* CFObjectGetHardwareAddress(void);
void* CFObjectGetInt64(void);
void* CFObjectGetInt64Ranged(void);
void* CFObjectGetPropertyCStringSync(void);
void* CFObjectGetPropertyDoubleSync(void);
void* CFObjectGetPropertyInt64Sync(void);
void* CFObjectGetUUID(void);
void* CFObjectSetBytes(void);
void* CFObjectSetCString(void);
void* CFObjectSetDouble(void);
void* CFObjectSetHardwareAddress(void);
void* CFObjectSetInt64(void);
void* CFObjectSetProperty(void);
void* CFObjectSetPropertyCString(void);
void* CFObjectSetPropertyData(void);
void* CFObjectSetPropertyDouble(void);
void* CFObjectSetPropertyF(void);
void* CFObjectSetPropertyInt64(void);
void* CFObjectSetUUID(void);
void* CFObjectSetUUIDString(void);
void* CFObjectSetValue(void);
void* CFPrefs_CopyKeys(void);
void* CFPrefs_CopyTypedValue(void);
void* CFPrefs_GetCString(void);
void* CFPrefs_GetData(void);
void* CFPrefs_GetDouble(void);
void* CFPrefs_GetInt64(void);
void* CFPrefs_RemoveValue(void);
void* CFPrefs_SetCString(void);
void* CFPrefs_SetDouble(void);
void* CFPrefs_SetInt64(void);
void* CFPrefs_SetValue(void);
void* CFPropertyListAppendFormatted(void);
void* CFPropertyListCreateBytes(void);
void* CFPropertyListCreateFormatted(void);
void* CFPropertyListCreateFormattedVAList(void);
void* CFPropertyListCreateFromFilePath(void);
void* CFPropertyListExtractFormatted(void);
void* CFPropertyListWriteToFilePath(void);
void* CFRunLoopRunEx(void);
void* CFRunLoopRunFor(void);
void* CFRuntimeCreateObject(void);
void* CFSetApplyBlock(void);
void* CFSetObjectAtPath(void);
void* CFSortCompareKeyPath(void);
void* CFSortLocalizedStandardCompare(void);
void* CFStringAppendF(void);
void* CFStringAppendV(void);
void* CFStringCopyUTF8CString(void);
void* CFStringCreateF(void);
void* CFStringCreateV(void);
void* CFStringGetOrCopyCStringUTF8(void);
void* CGColorCreateWithRGB(void);
void* CGColorGetBlack(void);
void* CGColorSpaceGetGray(void);
void* CGColorSpaceGetRGB(void);
void* CGImageCreateData(void);
void* CGImageCreateWithData(void);
void* CLIArgNameValueParse(void);
void* CLIArgToValue(void);
void* CLIFlagsToValue(void);
void* CLIFlagsToValueEx(void);
void* CLIHelpCommand(void);
void* CLIInit(void);
void* CLIInteractiveReadLine(void);
void* CLIInteractiveReadLine_b(void);
void* CLIOutputBegin(void);
void* CLIOutputEnd(void);
void* CLIParse(void);
void* CLIProgressClear(void);
void* CLIProgressUpdate(void);
void* CLIPromptForPIN(void);
void* CPrintF(void);
void* CRC16_CCITT(void);
void* CUAddSuffixForCurrentDeviceClass(void);
void* CUAddSuffixForDeviceClass(void);
void* CUAltDSIDPrimary(void);
void* CUCLIPrefs(void);
void* CUCopyMACAddresses(void);
void* CUDashboardLog(void);
void* CUDescriptionWithLevel(void);
void* CUDispatchSocketAllocate(void);
void* CUDispatchSocketCancelAll(void);
void* CUDispatchSocketReadCanceled(void);
void* CUDispatchSocketWriteCanceled(void);
void* CUDispatchTimerSet(void);
void* CUErrorCFErrorToString(void);
void* CUErrorDomainCodeToString(void);
void* CUGetInterfaceAddresses(void);
void* CUIsGreenTeaDevice(void);
void* CULocalizedStringEx(void);
void* CUMainQueue(void);
void* CUMetricsLog(void);
void* CUMetricsLogEx(void);
void* CUNormalizeEmailAddress(void);
void* CUNormalizePhoneNumber(void);
void* CUSetSystemName(void);
void* CUStateDumpWithObject(void);
void* CUTXTDataCreateWithDictionary(void);
void* CUTXTDictionaryCreateWithTXTData(void);
void* CUVectorClockCompare(void);
void* CUVectorClockCreate(void);
void* CUVectorClockCreateDictionary(void);
void* CUVectorClockLocalEvent(void);
void* CUVectorClockReceivedMessage(void);
void* CUVectorClockSendMessageCopy(void);
void* CUXPCDecodeBool(void);
void* CUXPCDecodeDouble(void);
void* CUXPCDecodeNSArrayOfInteger(void);
void* CUXPCDecodeNSData(void);
void* CUXPCDecodeNSDataOfLength(void);
void* CUXPCDecodeNSError(void);
void* CUXPCDecodeNSErrorIfNeeded(void);
void* CUXPCDecodeNSString(void);
void* CUXPCDecodeNSUUID(void);
void* CUXPCDecodeSInt64Ranged(void);
void* CUXPCDecodeSInt64RangedEx(void);
void* CUXPCDecodeUInt64Ranged(void);
void* CUXPCDecodeUInt64RangedEx(void);
void* CUXPCEncodeNSArrayOfNSNumber(void);
void* CUXPCEncodeNSError(void);
void* CUXPCGetNextClientID(void);
void* CocoaTextViewAppendUTF8String(void);
void* CopyEDIDbyUUID(void);
void* CopyFileDataByFile(void);
void* CopyFileDataByPath(void);
void* CoreAudioCopyDataSourceName(void);
void* CoreAudioCopyPropertyData(void);
void* CoreAudioFindDeviceByUID(void);
void* CoreAudioGetDefaultAudioDevice(void);
void* CoreAudioGetPropertyData(void);
void* CoreAudioPropertyListener_Create(void);
void* CoreAudioPropertyListener_Delete(void);
void* CoreAudioRampParameterStart(void);
void* CoreAudioSetDefaultAudioDevice(void);
void* CoreAudioSetPropertyData(void);
void* CreateCAContextForRemoteHosting(void);
void* CreateCALayerForRemoteDrawing(void);
void* CreateScaledImageDataWithData(void);
void* CreateTXTRecordWithCString(void);
void* CreateUsableInterfaceList(void);
void* CryptoAEADCreate(void);
void* CryptoAEADDecryptMessage(void);
void* CryptoAEADDecryptMessageOneShot(void);
void* CryptoAEADEncryptMessage(void);
void* CryptoAEADEncryptMessageOneShot(void);
void* CryptoHKDF(void);
void* CryptoHMACFinal(void);
void* CryptoHMACInit(void);
void* CryptoHMACOneShot(void);
void* CryptoHMACUpdate(void);
void* CryptoHashFinal(void);
void* CryptoHashInit(void);
void* CryptoHashOneShot(void);
void* CryptoHashUpdate(void);
void* CryptoRandomKey(void);
void* Curve25519MakeKeyPair(void);
void* DACPServer_AddRemote(void);
void* DACPServer_Create(void);
void* DACPServer_GetRemoteCount(void);
void* DACPServer_RemoveRemote(void);
void* DMAPContentBlock_AddCFObjectByKey(void);
void* DMAPContentBlock_AddInt32(void);
void* DMAPContentBlock_AddInt8(void);
void* DMAPContentBlock_CloseContainer(void);
void* DMAPContentBlock_Commit(void);
void* DMAPContentBlock_Free(void);
void* DMAPContentBlock_GetNextChunk(void);
void* DMAPContentBlock_Init(void);
void* DMAPContentBlock_OpenContainer(void);
void* DMAPFindEntryByContentCode(void);
void* DataBuffer_Append(void);
void* DataBuffer_AppendF(void);
void* DataBuffer_AppendFile(void);
void* DataBuffer_AppendIE(void);
void* DataBuffer_Commit(void);
void* DataBuffer_Detach(void);
void* DataBuffer_Free(void);
void* DataBuffer_Init(void);
void* DataBuffer_RunProcessAndAppendOutput(void);
void* DataToHexCStringEx(void);
void* DebugGetErrorString(void);
void* DebugGetErrorStringEx(void);
void* DebugGetNextError(void);
void* DebugIPC_EnsureFinalized(void);
void* DebugIPC_EnsureInitialized(void);
void* DebugIPC_LogControl(void);
void* DebugIPC_PerformF(void);
void* DebugIsCurrentDispatchQueue(void);
void* DebugPrintAssert(void);
void* DeviceOSVersionAtOrLater(void);
void* DrainUDPSocket(void);
void* ErrQuit(void);
void* FDWriteAll(void);
void* FPrintF(void);
void* FadeInLayerThruBlack(void);
void* FadeOutLayerThruBlack(void);
void* FatalErrorF(void);
void* FatalErrorV(void);
void* FourCharCodeToCString(void);
void* FreeCommandLineArgV(void);
void* GestaltCopyAnswer(void);
void* GestaltGetBoolean(void);
void* GestaltGetCString(void);
void* GestaltGetData(void);
void* GestaltGetDeviceClass(void);
void* GestaltProductTypeStringToDeviceClass(void);
void* GestaltSetDomain(void);
void* GestaltSetHook(void);
void* GetDeviceInternalModelString(void);
void* GetDeviceModelString(void);
void* GetDeviceName(void);
void* GetDeviceUniqueID(void);
void* GetFairPlayHWInfo(void);
void* GetFairPlayHWInfoEx(void);
void* GetFileExtensionFromString(void);
void* GetInterfaceMACAddress(void);
void* GetLastFilePathSegment(void);
void* GetLocalHostName(void);
void* GetMachThreadPriority(void);
void* GetPeerMACAddress(void);
void* GetPrimaryIPAddress(void);
void* GetPrimaryMACAddress(void);
void* GetProcessNameByPID(void);
void* GetSystemBuildVersionString(void);
void* H264ConvertAVCCtoAnnexBHeader(void);
void* H264EscapeEmulationPrevention(void);
void* H264GetNextNALUnit(void);
void* HIDBrowserCopyProperty(void);
void* HIDBrowserCreate(void);
void* HIDBrowserSetDispatchQueue(void);
void* HIDBrowserSetEventHandler(void);
void* HIDBrowserSetProperty(void);
void* HIDBrowserStart(void);
void* HIDBrowserStop(void);
void* HIDBrowserStopDevices(void);
void* HIDButtonsCreateDescriptor(void);
void* HIDCopyOverrideDescriptor(void);
void* HIDDPadCreateDescriptor(void);
void* HIDDPadFillReport(void);
void* HIDDeregisterDevice(void);
void* HIDDeregisterOverrideDescriptor(void);
void* HIDDeviceCopyProperty(void);
void* HIDDeviceCreateVirtual(void);
void* HIDDevicePostReport(void);
void* HIDDeviceSetDispatchQueue(void);
void* HIDDeviceSetEventHandler(void);
void* HIDDeviceSetProperty(void);
void* HIDDeviceStart(void);
void* HIDDeviceStop(void);
void* HIDKnobCreateDescriptor(void);
void* HIDKnobFillReport(void);
void* HIDPointingCreateDescriptor(void);
void* HIDPointingFillReport(void);
void* HIDPostReport(void);
void* HIDRegisterDevice(void);
void* HIDRegisterOverrideDescriptor(void);
void* HIDSimpleFillReport(void);
void* HIDTelephonyCreateDescriptor(void);
void* HIDTrackpadCreateDescriptor(void);
void* HIDTrackpadFillReport(void);
void* HTTPClientAuthorization_Apply(void);
void* HTTPClientAuthorization_Free(void);
void* HTTPClientAuthorization_Init(void);
void* HTTPClientCreate(void);
void* HTTPClientCreateWithSocket(void);
void* HTTPClientDetach(void);
void* HTTPClientGetDelegateContext(void);
void* HTTPClientGetPeerAddress(void);
void* HTTPClientGetSelfAddress(void);
void* HTTPClientInvalidate(void);
void* HTTPClientSendBinaryBytes(void);
void* HTTPClientSendMessage(void);
void* HTTPClientSendMessageSync(void);
void* HTTPClientSetConnectionLogging(void);
void* HTTPClientSetDebugDelegate(void);
void* HTTPClientSetDelegate(void);
void* HTTPClientSetDestination(void);
void* HTTPClientSetDispatchQueue(void);
void* HTTPClientSetFlags(void);
void* HTTPClientSetKeepAlive(void);
void* HTTPClientSetKeepAliveEx(void);
void* HTTPClientSetLogging(void);
void* HTTPClientSetTimeout(void);
void* HTTPClientSetTransportDelegate(void);
void* HTTPConnectionCreate(void);
void* HTTPConnectionDetach(void);
void* HTTPConnectionGetNextURLSegmentEx(void);
void* HTTPConnectionInitResponse(void);
void* HTTPConnectionSendBinaryBytes(void);
void* HTTPConnectionSendEvent(void);
void* HTTPConnectionSendResponse(void);
void* HTTPConnectionSendSimpleResponseEx(void);
void* HTTPConnectionSetDelegate(void);
void* HTTPConnectionSetDispatchQueue(void);
void* HTTPConnectionSetTimeout(void);
void* HTTPConnectionSetTransportDelegate(void);
void* HTTPConnectionStart(void);
void* HTTPConnectionStop(void);
void* HTTPConnectionStopAsync(void);
void* HTTPGetHeaderField(void);
void* HTTPGetReasonPhrase(void);
void* HTTPHeader_Commit(void);
void* HTTPHeader_InitRequest(void);
void* HTTPHeader_InitRequestF(void);
void* HTTPHeader_InitResponse(void);
void* HTTPHeader_InitResponseEx(void);
void* HTTPHeader_Parse(void);
void* HTTPHeader_SetField(void);
void* HTTPMakeDateString(void);
void* HTTPMakeTimedNonce(void);
void* HTTPMessageCopy(void);
void* HTTPMessageCreate(void);
void* HTTPMessageCreateDictionary(void);
void* HTTPMessageGetHeaderField(void);
void* HTTPMessageGetOrCopyFormVariable(void);
void* HTTPMessageInitRequest(void);
void* HTTPMessageInitResponse(void);
void* HTTPMessageSetBody(void);
void* HTTPMessageSetBodyFileDescriptor(void);
void* HTTPMessageSetBodyFilePath(void);
void* HTTPMessageSetBodyLength(void);
void* HTTPMessageSetCompletionBlock(void);
void* HTTPMessageSetHeaderField(void);
void* HTTPMessageSetReceiveFilePath(void);
void* HTTPParseByteRangeRequest(void);
void* HTTPParseCacheControlHeader(void);
void* HTTPParseCacheControlValue(void);
void* HTTPParseParameter(void);
void* HTTPParseRTPInfo(void);
void* HTTPReadHeader(void);
void* HTTPScanFHeaderValue(void);
void* HTTPServerCreate(void);
void* HTTPServerSetDispatchQueue(void);
void* HTTPServerSetLogging(void);
void* HTTPServer_Create(void);
void* HTTPServer_Delete(void);
void* HTTPServer_GetNextURLSegment(void);
void* HTTPServer_GetOrCopyFormVariable(void);
void* HTTPServer_InitResponse(void);
void* HTTPServer_SendSimpleResponse(void);
void* HTTPServer_SendStatusResponse(void);
void* HTTPServer_SendUnauthorizedResponse(void);
void* HTTPServer_Start(void);
void* HTTPServer_Stop(void);
void* HTTPVerifyAuthorization(void);
void* HTTPVerifyTimedNonce(void);
void* HardwareAddressToCString(void);
void* HexToData(void);
void* HexToDataCopy(void);
void* IEBufferAppendIE(void);
void* IEBufferEndVendorIE(void);
void* IEBufferStartVendorIE(void);
void* IEEE80211iPasswordHash(void);
void* IEGet(void);
void* IEGetAppleGeneral(void);
void* IEGetNext(void);
void* IEGetVendorSpecific(void);
void* IO8Log(void);
void* IO8Log2(void);
void* IO8Logv(void);
void* IO8Logv2(void);
void* IOKitCopyParentOfClass(void);
void* IPv4AddressToCString(void);
void* IPv6AddressToCString(void);
void* IncrementNumericSuffix(void);
void* IsAppleInternalBuild(void);
void* IsAppleTV(void);
void* IsGlobalIPv4Address(void);
void* IsIPv6MartianAddress(void);
void* IsIPv6MartianAddressEx(void);
void* IsWiFiNetworkInterface(void);
void* KeychainAddFormatted(void);
void* KeychainCopyMatchingFormatted(void);
void* KeychainDeleteFormatted(void);
void* KeychainDeleteItemByPersistentRef(void);
void* KeychainUpdateFormatted(void);
void* LevenshteinDistance(void);
void* LogCategoryCopyOSLogHandle(void);
void* LogCategoryCreate(void);
void* LogCategoryCreateEx(void);
void* LogCategoryReplaceF(void);
void* LogCategoryReplaceV(void);
void* LogCategory_Remove(void);
void* LogControl(void);
void* LogControlCF(void);
void* LogHTTP(void);
void* LogPrintF(void);
void* LogPrintV(void);
void* LogSetAppID(void);
void* LogSetOutputCallback(void);
void* LogShow(void);
void* MFiPlatform_CopyCertificate(void);
void* MFiPlatform_CreateSignature(void);
void* MFiPlatform_CreateSignatureEx(void);
void* MFiPlatform_Finalize(void);
void* MFiPlatform_Initialize(void);
void* MFiPlatform_VerifySignature(void);
void* MFiSAP_CopyCertificate(void);
void* MFiSAP_CopyCertificateSerialNumber(void);
void* MFiSAP_Create(void);
void* MFiSAP_Decrypt(void);
void* MFiSAP_Delete(void);
void* MFiSAP_Encrypt(void);
void* MFiSAP_Exchange(void);
void* MIMETypeToExtension(void);
void* MakeFractionalDateString(void);
void* MapCFStringToValue(void);
void* MapStringToValue(void);
void* MemPrintF(void);
void* MicrosecondsToUpTicks(void);
void* MillisecondsToUpTicks(void);
void* MirroredRingBufferFree(void);
void* MirroredRingBufferInit(void);
void* MorseCode(void);
void* NADyFF4UGjtVGBmEW6h(void);
void* NMEAFree(void);
void* NMEAParse(void);
void* NSAppendPrintF(void);
void* NSAppendPrintV(void);
void* NSArrayGetNSUUIDAtIndex(void);
void* NSArrayGetValueAtIndexOfClass(void);
void* NSArrayValidateClasses(void);
void* NSDataCompress(void);
void* NSDataDecompress(void);
void* NSDataWithHex(void);
void* NSDecodeNSArrayOfClassIfPresent(void);
void* NSDecodeNSDictionaryOfClassesIfPresent(void);
void* NSDecodeNSSetOfClassIfPresent(void);
void* NSDecodeObjectIfPresent(void);
void* NSDecodeSInt64RangedIfPresent(void);
void* NSDecodeStandardContainerIfPresent(void);
void* NSDictionaryGetNSArrayOfClass(void);
void* NSDictionaryGetNSUUID(void);
void* NSDictionaryGetValueOfClass(void);
void* NSDictionaryValidateClasses(void);
void* NSErrorF(void);
void* NSErrorNestedF(void);
void* NSErrorNestedV(void);
void* NSErrorToOSStatus(void);
void* NSErrorV(void);
void* NSErrorWithOSStatusF(void);
void* NSPredicateMatches(void);
void* NSPrintF(void);
void* NSPrintTypedObject(void);
void* NSPrintV(void);
void* NSRandomData(void);
void* NSStringWithMACAddress(void);
void* NTPClockCreate(void);
void* NTPClockGetListenPort(void);
void* NTPClockGetSynchronizedNTPTime(void);
void* NTPClockGetSynchronizedNTPTimeNearUpTicks(void);
void* NTPClockGetUpTicksNearSynchronizedNTPTime(void);
void* NTPClockSetEpoch(void);
void* NTPClockSetListenPort(void);
void* NTPClockSetLogging(void);
void* NTPClockSetP2P(void);
void* NTPClockSetPeer(void);
void* NTPClockSetQoSDisabled(void);
void* NTPClockSetRTCP(void);
void* NTPClockSetThreadName(void);
void* NTPClockSetThreadPriority(void);
void* NTPClockSetUpTicksConvertHandler(void);
void* NTPClockSetUpTicksPerSecondHandler(void);
void* NTPClockStartClient(void);
void* NTPClockStartServer(void);
void* NTPClockStop(void);
void* NTPtoUpTicks(void);
void* NanoTimeGetCurrent(void);
void* NanosecondsToUpTicks(void);
void* NetPerfCreate(void);
void* NetPerfSetEventHandler(void);
void* NetSocketChaCha20Poly1305Configure(void);
void* NetSocketGCM_Configure(void);
void* NetSocketTLS_Configure(void);
void* NetSocket_Cancel(void);
void* NetSocket_Create(void);
void* NetSocket_CreateWithNative(void);
void* NetSocket_Delete(void);
void* NetSocket_Disconnect(void);
void* NetSocket_GetNative(void);
void* NetSocket_HTTPReadHeader(void);
void* NetSocket_ReadFile(void);
void* NetSocket_Reset(void);
void* NetSocket_TCPConnect(void);
void* NetSocket_Wait(void);
void* NetTransportChaCha20Poly1305Configure(void);
void* NetTransportGCMConfigure(void);
void* NetTransportTLSConfigure(void);
void* NetTransportTLSConfigureEx(void);
void* NetTransportTLSPSKConfigure(void);
void* NetworkChangeListenerCreate(void);
void* NetworkChangeListenerSetDispatchQueue(void);
void* NetworkChangeListenerSetHandler(void);
void* NetworkChangeListenerStart(void);
void* NetworkChangeListenerStop(void);
void* NormalizePath(void);
void* NormalizeUUIDString(void);
void* OPACKDecodeBytes(void);
void* OPACKDecodeData(void);
void* OPACKEncodeObject(void);
void* OPACKEncoderCreateData(void);
void* OPACKEncoderCreateDataMutable(void);
void* OPACKEstimateEncodedSize(void);
void* OSX_Apple80211ANQPAppendAppleActionFrameHeader(void);
void* OSX_Apple80211ANQPAppendGASComebackRequest(void);
void* OSX_Apple80211ANQPAppendGASInitialRequestHeader(void);
void* OSX_Apple80211ANQPAppendHS20QueryList(void);
void* OSX_Apple80211ANQPAppendIEEEQueryList(void);
void* OSX_Apple80211ANQPParse3GPPCellularNetwork(void);
void* OSX_Apple80211ANQPParseANQPData(void);
void* OSX_Apple80211ANQPParseActionFrame(void);
void* OSX_Apple80211ANQPParseCapabilityList(void);
void* OSX_Apple80211ANQPParseDomainName(void);
void* OSX_Apple80211ANQPParseGASComebackResponse(void);
void* OSX_Apple80211ANQPParseGASInitialResponse(void);
void* OSX_Apple80211ANQPParseHS20CapabilityList(void);
void* OSX_Apple80211ANQPParseHS20ConnectionCapability(void);
void* OSX_Apple80211ANQPParseHS20Element(void);
void* OSX_Apple80211ANQPParseHS20OperationClassIndication(void);
void* OSX_Apple80211ANQPParseHS20OperatorFriendlyName(void);
void* OSX_Apple80211ANQPParseHS20WANMetrics(void);
void* OSX_Apple80211ANQPParseIPAddressTypeAvailability(void);
void* OSX_Apple80211ANQPParseNAIRealm(void);
void* OSX_Apple80211ANQPParseNetworkAuthenticationType(void);
void* OSX_Apple80211ANQPParseRoamingConsortium(void);
void* OSX_Apple80211ANQPParseVenueName(void);
void* OSX_Apple80211ANQPParseWFAElement(void);
void* OpenSelfConnectedLoopbackSocket(void);
void* P2PAllocAppleIE(void);
void* P2PAllocComebackResp(void);
void* P2PAllocComebackRespList(void);
void* P2PAllocGONegReqFrm(void);
void* P2PAllocInitialReqFrm(void);
void* P2PAllocInitialRespFrm(void);
void* P2PAllocInvitationRequest(void);
void* P2PAllocInvitationResponse(void);
void* P2PAllocServiceDiscoveryResp(void);
void* P2PAllocWPSAssocReqIE(void);
void* P2PAllocWPSAssocRespIE(void);
void* P2PAllocWPSBeaconIE(void);
void* P2PAllocWPSProbeReqIE(void);
void* P2PAllocWPSProbeResponseIE(void);
void* P2PIEAllocAssocReqIE(void);
void* P2PIEAllocBeaconIE(void);
void* P2PIEAllocProbeRequestIE(void);
void* P2PIEAllocProbeRespIE(void);
void* P2PIEInitAssocRespIE(void);
void* P2PInitComebackReq(void);
void* P2PParseAppleIESubtypeList(void);
void* P2PParseComebackRequest(void);
void* P2PParseComebackResponse(void);
void* P2PParseComebackResponseFragmentList(void);
void* P2PParseGASInitialRequestFrame(void);
void* P2PParseGASInitialResponseFrame(void);
void* P2PParseInvitationRequest(void);
void* P2PParseInvitationResponse(void);
void* P2PParseSubelements(void);
void* P2PStatusCodeToString(void);
void* PIDInit(void);
void* PIDUpdate(void);
void* PairingSessionCopyExtraData(void);
void* PairingSessionCopyIdentity(void);
void* PairingSessionCopyPairedPeer(void);
void* PairingSessionCopyPeer(void);
void* PairingSessionCopyPeerACL(void);
void* PairingSessionCopyPeerIdentifier(void);
void* PairingSessionCopyPeerInfo(void);
void* PairingSessionCopyPeers(void);
void* PairingSessionCopyProperty(void);
void* PairingSessionCreate(void);
void* PairingSessionDeleteIdentity(void);
void* PairingSessionDeletePeer(void);
void* PairingSessionDeriveKey(void);
void* PairingSessionExchange(void);
void* PairingSessionFindPeer(void);
void* PairingSessionGetPairedPeer(void);
void* PairingSessionGetPeerAppFlags(void);
void* PairingSessionGetPeerFlags(void);
void* PairingSessionGetResumeInfo(void);
void* PairingSessionInvalidate(void);
void* PairingSessionSavePeer(void);
void* PairingSessionSetACL(void);
void* PairingSessionSetAddPairingHandler(void);
void* PairingSessionSetAdditionalPeerInfo(void);
void* PairingSessionSetAdditionalSelfInfo(void);
void* PairingSessionSetEventHandler(void);
void* PairingSessionSetExtraData(void);
void* PairingSessionSetFlags(void);
void* PairingSessionSetIdentifier(void);
void* PairingSessionSetKeychainInfo(void);
void* PairingSessionSetListPairingsHandler(void);
void* PairingSessionSetLogging(void);
void* PairingSessionSetMTU(void);
void* PairingSessionSetMaxResumeSessions(void);
void* PairingSessionSetMaxTries(void);
void* PairingSessionSetMyAppleID(void);
void* PairingSessionSetMyAppleIDInfoClient(void);
void* PairingSessionSetPeerAppleID(void);
void* PairingSessionSetPeerAppleIDs(void);
void* PairingSessionSetProperty(void);
void* PairingSessionSetRemovePairingHandler(void);
void* PairingSessionSetResumeInfo(void);
void* PairingSessionSetResumeTTL(void);
void* PairingSessionSetSelfAppFlags(void);
void* PairingSessionSetSetupCode(void);
void* PairingSessionSetSignBytesHandler(void);
void* PairingSessionSetSignBytesHandler_b(void);
void* PairingSessionSetVerifySignatureHandler_b(void);
void* PairingSessionUpdatePeerInfo(void);
void* Parity32(void);
void* ParseCommandLineIntoArgV(void);
void* ParseFractionalDateString(void);
void* ParseLine(void);
void* PrintFCore(void);
void* PrintFCoreVAList(void);
void* PrintFDeregisterExtension(void);
void* PrintFRegisterExtension(void);
void* RandomBytes(void);
void* RandomString(void);
void* ReadANSIFile(void);
void* RegexMatch(void);
void* ReleaseUsableInterfaceList(void);
void* RemovePath(void);
void* ReplaceDifferentString(void);
void* ReplaceString(void);
void* RollLogFiles(void);
void* RunProcessAndCaptureOutput(void);
void* RunProcessAndCaptureOutputEx(void);
void* SDPFindAttribute(void);
void* SDPFindMediaSection(void);
void* SDPFindParameter(void);
void* SDPFindSessionSection(void);
void* SDPFindType(void);
void* SDPGetNext(void);
void* SDPGetNextAttribute(void);
void* SNPrintF(void);
void* SNPrintF_Add(void);
void* SNScanF(void);
void* SRPClientStart_corecrypto(void);
void* SRPClientStart_libsrp(void);
void* SRPClientVerify_corecrypto(void);
void* SRPClientVerify_libsrp(void);
void* SRPCreate_corecrypto(void);
void* SRPCreate_libsrp(void);
void* SRPDelete_corecrypto(void);
void* SRPDelete_libsrp(void);
void* SRPServerStart_corecrypto(void);
void* SRPServerStart_libsrp(void);
void* SRPServerVerify_corecrypto(void);
void* SRPServerVerify_libsrp(void);
void* SaveScreenshot(void);
void* ScreenCopyAllScreens(void);
void* ScreenCopyMain(void);
void* ScreenCreate(void);
void* ScreenDeregister(void);
void* ScreenGetTypeID(void);
void* ScreenRegister(void);
void* ScreenStreamCreate(void);
void* ScreenStreamProcessData(void);
void* ScreenStreamSetFrameHook(void);
void* ScreenStreamStart(void);
void* ScreenStreamStop(void);
void* SecondsToUpTicks(void);
void* SecondsToUpTicksF(void);
void* SecondsToYMD_HMS(void);
void* SendSelfConnectedLoopbackMessage(void);
void* SerialStreamCreate(void);
void* SerialStreamGetTypeID(void);
void* SerialStreamInvalidate(void);
void* SerialStreamRead(void);
void* SerialStreamReadLine(void);
void* SerialStreamReadLineSync(void);
void* SerialStreamReadSync(void);
void* SerialStreamSetConfig(void);
void* SerialStreamSetDispatchQueue(void);
void* SerialStreamWrite(void);
void* SerialStreamWriteSync(void);
void* ServerSocketOpen(void);
void* ServerSocketOpenEx(void);
void* ServerSocketOpenEx2(void);
void* ServerSocketPairOpen(void);
void* SetCurrentThreadPriority(void);
void* SimpleArrayAppendItem(void);
void* SimpleArrayRemoveItemAtIndex(void);
void* SineTable_Create(void);
void* SineTable_Delete(void);
void* SineTable_GetSamples(void);
void* SipHash(void);
void* SleepForUpTicks(void);
void* SleepUntilUpTicks(void);
void* SockAddrCompareAddr(void);
void* SockAddrConvertToIPv6(void);
void* SockAddrCopy(void);
void* SockAddrGetPort(void);
void* SockAddrGetSize(void);
void* SockAddrSetPort(void);
void* SockAddrSimplify(void);
void* SockAddrToDeviceID(void);
void* SockAddrToString(void);
void* SocketAccept(void);
void* SocketConnect(void);
void* SocketGetInterfaceInfo(void);
void* SocketJoinMulticast(void);
void* SocketLeaveMulticast(void);
void* SocketReadData(void);
void* SocketReadDataEx(void);
void* SocketRecvFrom(void);
void* SocketSetBoundInterface(void);
void* SocketSetBufferSize(void);
void* SocketSetKeepAlive(void);
void* SocketSetKeepAliveEx(void);
void* SocketSetMulticastInterface(void);
void* SocketSetNonBlocking(void);
void* SocketSetNotSentLowWatermark(void);
void* SocketSetP2P(void);
void* SocketSetPacketTimestamps(void);
void* SocketSetQoS(void);
void* SocketSetTCPTimeout(void);
void* SocketTransportRead(void);
void* SocketWriteData(void);
void* SourceVersionToCString(void);
void* StringArray_Free(void);
void* StringToSockAddr(void);
void* StringToUUID(void);
void* StringToUUIDEx(void);
void* Swap16Mem(void);
void* SwitchToMobileUser(void);
void* TDSBloomFilterAddHash(void);
void* TDSBloomFilterAddString(void);
void* TDSBloomFilterContainsHash(void);
void* TDSBloomFilterContainsString(void);
void* TLV8BufferAppend(void);
void* TLV8BufferAppendSInt64(void);
void* TLV8BufferAppendUInt64(void);
void* TLV8BufferDetach(void);
void* TLV8BufferFree(void);
void* TLV8BufferInit(void);
void* TLV8Get(void);
void* TLV8GetBytes(void);
void* TLV8GetNext(void);
void* TLV8GetOrCopyCoalesced(void);
void* TLV8GetUInt64(void);
void* TLVParseSInt64(void);
void* TLVParseUInt64(void);
void* TN6sBSnEP2(void);
void* TUConvertToJUnit(void);
void* TUFaultDisable(void);
void* TUFaultEnable(void);
void* TUFaultInject(void);
void* TUFinalize(void);
void* TUInitialize(void);
void* TULogF(void);
void* TULogLevelEnabled(void);
void* TULogV(void);
void* TUSetExpectedTestCount(void);
void* TUTestRequire(void);
void* TUTestRequireNoErr(void);
void* TUTestRequireNoNSError(void);
void* TUTestStateCreate(void);
void* TUTestStateGetObject(void);
void* TUTestStateGetSInt32(void);
void* TUTestStateSetObject(void);
void* TUTestStateSetSInt32(void);
void* TUTestStateSignal(void);
void* TUTestStateSignalCount(void);
void* TUTestStateUpdateSInt32(void);
void* TUTestStateWait(void);
void* TXTRecordCreateWithDictionary(void);
void* TXTRecordGetNextItem(void);
void* TextFindColumn(void);
void* TextSep(void);
void* TextToFourCharCode(void);
void* TextToHardwareAddress(void);
void* TextToHardwareAddressScalar(void);
void* TextToInt32(void);
void* TextToSourceVersion(void);
void* TranslateValue(void);
void* TruncateUTF8(void);
void* UDPClientSocketOpen(void);
void* URLGetNextPathSegment(void);
void* URLGetOrCopyNextVariable(void);
void* URLGetOrCopyVariable(void);
void* URLGetVariable(void);
void* URLParseComponents(void);
void* UUIDGet(void);
void* UUIDGetPerSystemHost(void);
void* UUIDGetPerUserHost(void);
void* UUIDtoCString(void);
void* UUIDtoCStringEx(void);
void* UUIDtoCStringFlags(void);
void* UpTicksPerSecond(void);
void* UpTicksToMicroseconds(void);
void* UpTicksToMilliseconds(void);
void* UpTicksToNTP(void);
void* UpTicksToNanoseconds(void);
void* UpTicksToSeconds(void);
void* UpTicksToSecondsF(void);
void* UpdateIOVec(void);
void* VASPrintF(void);
void* VCPrintF(void);
void* VFPrintF(void);
void* VSNPrintF(void);
void* VSNScanF(void);
void* ValueSmootherFree(void);
void* ValueSmootherGet(void);
void* ValueSmootherInit(void);
void* ValueSmootherUpdate(void);
void* VarIntDecode64(void);
void* VarIntEncode64(void);
void* WPAHashPSK(void);
void* WiFiCopyCurrentNetworkInfo(void);
void* WiFiCopyCurrentNetworkInfoEx(void);
void* WiFiCopyNetworkInfo(void);
void* WiFiJoinNetwork(void);
void* WiFiJoinNetwork_b(void);
void* WiFiManagerCreate(void);
void* WiFiManagerDoApple80211(void);
void* WiFiManagerGetInt64(void);
void* WiFiManagerSetProperty(void);
void* WiFiRestoreNetwork(void);
void* WiFiSWAPStart(void);
void* WiFiSWAPStop(void);
void* WiFiScan(void);
void* WiFiScan_b(void);
void* WriteANSIFile(void);
void* XMLDocumentCreateData(void);
void* XMLDocumentCreateWithBytes(void);
void* XMLNodeFindNamedAttribute(void);
void* XMLNodeGetChildren(void);
void* XMLNodeGetDataBytePtr(void);
void* XMLNodeGetNamePtr(void);
void* XMLNodeGetNextNode(void);
void* XMLNodeSetDataBytes(void);
void* _AudioStreamCopyProperty(void);
void* _AudioStreamSetProperty(void);
void* _CLIHelpCommand(void);
void* _CLIHelpOption(void);
void* _CLIInteractiveOption(void);
void* _CLIVersionCommand(void);
void* _CLIVersionOption(void);
void* _HTTPClientSetProperty(void);
void* _HTTPServerControl(void);
void* _HTTPServerSetProperty(void);
void* _LogCategory_Initialize(void);
void* _NetPerfControl(void);
void* _ScreenCopyProperty(void);
void* _ScreenSetProperty(void);
void* _ScreenStreamSetProperty(void);
void* _TUPerformTest(void);
void* _TUXCTestSetup(void);
void* _allocGroupInfoDict(void);
void* _allocP2PInterfaceDict(void);
void* _dispatchBGScanCachedNetworks(void);
void* _dispatchBssSteeringRequest(void);
void* _dispatchGasResults(void);
void* _dispatchLeakyStatsEvent(void);
void* _dispatchP2PNearbyLogTrigger(void);
void* _dispatchRangingResults(void);
void* _eventRead(void);
void* _getRangingPeerRequest(void);
void* _getRangingPhyErrorString(void);
void* _handleNANGetRequest(void);
void* _handleNANSetRequest(void);
void* _parseHs20OperatorName(void);
void* apIsApple(void);
void* asl_init(void);
void* asl_stop(void);
void* cced25519_make_key_pair_compat(void);
void* cced25519_sign_compat(void);
void* cced25519_verify_compat(void);
void* chacha20_all_64x64(void);
void* chacha20_all_96x32(void);
void* chacha20_final(void);
void* chacha20_init_64x64(void);
void* chacha20_poly1305_add_aad(void);
void* chacha20_poly1305_decrypt(void);
void* chacha20_poly1305_decrypt_all_64x64(void);
void* chacha20_poly1305_decrypt_all_64x64_ex(void);
void* chacha20_poly1305_decrypt_all_96x32(void);
void* chacha20_poly1305_decrypt_all_96x32_ex(void);
void* chacha20_poly1305_encrypt(void);
void* chacha20_poly1305_encrypt_all_64x64(void);
void* chacha20_poly1305_encrypt_all_96x32(void);
void* chacha20_poly1305_final(void);
void* chacha20_poly1305_init_64x64(void);
void* chacha20_poly1305_init_96x32(void);
void* chacha20_poly1305_verify(void);
void* chacha20_update(void);
void* copyFamilyDebugFlagsForInterface(void);
void* copyVendorDebugFlagsForInterface(void);
void* curve25519_donna(void);
void* fcopyline(void);
void* iceil2(void);
void* ifloor2_64(void);
void* ilog2_64(void);
void* memrchr(void);
void* memrlen(void);
void* mkparent(void);
void* mkpath(void);
void* poly1305(void);
void* poly1305_final(void);
void* poly1305_init(void);
void* poly1305_update(void);
void* rt_dispatch_async(void);
void* rt_dispatch_async_f(void);
void* rt_dispatch_get_context(void);
void* rt_dispatch_queue_create(void);
void* rt_dispatch_release(void);
void* rt_dispatch_resume(void);
void* rt_dispatch_retain(void);
void* rt_dispatch_set_context(void);
void* rt_dispatch_set_finalizer_f(void);
void* rt_dispatch_source_cancel(void);
void* rt_dispatch_source_create(void);
void* rt_dispatch_source_set_event_handler(void);
void* rt_dispatch_source_set_event_handler_f(void);
void* rt_dispatch_source_set_timer(void);
void* rt_dispatch_suspend(void);
void* rt_dispatch_sync(void);
void* rt_dispatch_time(void);
void* se1P4X0Kh(void);
void* setFamilyDebugFlagsForInterface(void);
void* setVendorDebugFlagsForInterface(void);
void* snprintf_add(void);
void* strcmp_prefix(void);
void* stricmp_prefix(void);
void* stristr(void);
void* strncasestr(void);
void* strncmp_prefix(void);
void* strncmpx(void);
void* strnicmp_prefix(void);
void* strnicmp_suffix(void);
void* strnicmpx(void);
void* systemf(void);
void* unified_logger_deinit(void);
void* unified_logger_init(void);
void* unified_temp_logger_deinit(void);
void* unified_temp_logger_init(void);
void* updateDebugFlagPreferences(void);
void* wInTP56r94EFs9NAAi(void);
void* wifi_prefs_deinit(void);
void* wifi_prefs_init(void);
void* xpc_connection_has_entitlement(void);
void* xpc_connection_send_message_with_reply_f(void);
void* xpc_connection_set_event_handler_f(void);
void* xpc_dictionary_copy_cf_object(void);
void* xpc_dictionary_set_cf_object(void);
void* xpc_send_message_sync(void);

// not sure why this library has its own versions of these?
#if 0
void* strndup(void);
void* strnlen(void);
#endif

#endif
