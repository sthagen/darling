/*
 This file is part of Darling.

 Copyright (C) 2019 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _IOBluetooth_H_
#define _IOBluetooth_H_

#import <Foundation/Foundation.h>

#import <IOBluetooth/BluetoothClientInterface.h>
#import <IOBluetooth/BluetoothDaemonInterface.h>
#import <IOBluetooth/BluetoothXPCClientProtocol.h>
#import <IOBluetooth/BluetoothXPCDaemonProtocol.h>
#import <IOBluetooth/IOBluetoothRFCOMMChannelDelegate.h>
#import <IOBluetooth/NSPortDelegate.h>
#import <IOBluetooth/NSXPCListenerDelegate.h>
#import <IOBluetooth/TransferModuleInterface.h>
#import <IOBluetooth/IOBluetoothDeviceExpansion.h>
#import <IOBluetooth/SDPQueryCallbackDispatcher.h>
#import <IOBluetooth/IOBluetoothDevice.h>
#import <IOBluetooth/BTClient.h>
#import <IOBluetooth/BluetoothDeviceManager.h>
#import <IOBluetooth/IOBluetoothL2CAPChannelExpansion.h>
#import <IOBluetooth/IOBluetoothL2CAPChannel.h>
#import <IOBluetooth/IOBluetoothRFCOMMChannel.h>
#import <IOBluetooth/IOBluetoothRFCOMMConnection.h>
#import <IOBluetooth/IOBluetoothSDPServiceRecord.h>
#import <IOBluetooth/IOBluetoothSerialPort.h>
#import <IOBluetooth/IOBluetoothSerialPortManager.h>
#import <IOBluetooth/NotificationInfo.h>
#import <IOBluetooth/IOBluetoothNotification.h>
#import <IOBluetooth/IOBluetoothOBEXSession.h>
#import <IOBluetooth/IOBluetoothSDPDataElement.h>
#import <IOBluetooth/IOBluetoothSDPServiceAttribute.h>
#import <IOBluetooth/IOBluetoothSDPUUID.h>
#import <IOBluetooth/OBEXSession.h>
#import <IOBluetooth/IOBluetoothUserNotification.h>
#import <IOBluetooth/IOBluetoothConcreteUserNotification.h>
#import <IOBluetooth/IOBluetoothNSUserNotification.h>
#import <IOBluetooth/IOBluetoothNSObjCUserNotification.h>
#import <IOBluetooth/IOBluetoothNSCUserNotification.h>
#import <IOBluetooth/IOBluetoothLocalSDPServiceRecord.h>
#import <IOBluetooth/IOBluetoothObject.h>
#import <IOBluetooth/OBEXFilePut.h>
#import <IOBluetooth/BluetoothFileReference.h>
#import <IOBluetooth/OBEXFileTransferServices.h>
#import <IOBluetooth/OBEXFileAction.h>
#import <IOBluetooth/OBEXFileGet.h>
#import <IOBluetooth/IOBluetoothCloudServerClient.h>
#import <IOBluetooth/IOBluetoothDaemonNSXPCClient.h>
#import <IOBluetooth/IOBluetoothTransferProgress.h>
#import <IOBluetooth/AppleBluetoothHIDDeviceGen2.h>
#import <IOBluetooth/BluetoothHIDDevice.h>
#import <IOBluetooth/BluetoothHIDDeviceController.h>
#import <IOBluetooth/IOBluetoothDeviceInfoGatherer.h>
#import <IOBluetooth/AppleBluetoothHIDDevice.h>
#import <IOBluetooth/HardcopyCableReplacement.h>
#import <IOBluetooth/IOBluetoothHardcopyCableReplacement.h>
#import <IOBluetooth/RegistryObjectNotificationWrapper.h>
#import <IOBluetooth/IORegistryObjectNotifier.h>
#import <IOBluetooth/SystemPowerNotifier.h>
#import <IOBluetooth/FrameworksAnalyticsPackager.h>
#import <IOBluetooth/IOBluetoothAutomaticDeviceSetup.h>
#import <IOBluetooth/IOBluetoothDeviceInquiryExpansion.h>
#import <IOBluetooth/IOBluetoothDeviceInquiry.h>
#import <IOBluetooth/IOBluetoothDeviceInquiryCSupportObject.h>
#import <IOBluetooth/IOBluetoothHandsFreeAudioGatewayExpansion.h>
#import <IOBluetooth/IOBluetoothHandsFreeAudioGateway.h>
#import <IOBluetooth/IOBluetoothHostControllerExpansion.h>
#import <IOBluetooth/IOBluetoothHostController.h>
#import <IOBluetooth/IOBluetoothDevicePairExpansion.h>
#import <IOBluetooth/IOBluetoothDevicePair.h>
#import <IOBluetooth/BroadcomHostController.h>
#import <IOBluetooth/CSRHostController.h>
#import <IOBluetooth/CSRBlueICEHostController.h>
#import <IOBluetooth/IOBluetoothPreferences.h>
#import <IOBluetooth/IOBluetoothHandsFreeDeviceExpansion.h>
#import <IOBluetooth/IOBluetoothHandsFreeDevice.h>
#import <IOBluetooth/IOBluetoothHandsFreeExpansion.h>
#import <IOBluetooth/IOBluetoothHandsFree.h>
#import <IOBluetooth/BNEPControl.h>
#import <IOBluetooth/BluetoothUIServer.h>
#import <IOBluetooth/AtherosHostController.h>
#import <IOBluetooth/ConnectionCompleteCallbackDispatcher.h>
#import <IOBluetooth/IOBluetoothAudioManager.h>
#import <IOBluetooth/IOBluetoothHeadsetAudioGateway.h>

void* AddEmptyDataRefToDictionary(void);
void* AddEmptyStringToDictionary(void);
void* AppleArchiveCreateUniquelyFromPath(void);
void* AppleArchiveExpandAtPath(void);
void* AppleSingleToUTCDateTime(void);
void* BCCMD16ToUInt16(void);
void* BCCMD16ToUInt8(void);
void* BCCMD32ToUInt32(void);
void* BTNSObjectFromXPCObject(void);
void* BTXPCObjectFromNSObject(void);
void* BluetoothClearIdleTimerInNVRAM(void);
void* BluetoothDisableIdleTimer(void);
void* BluetoothDoNotTickleDisplay(void);
void* BluetoothDoReset(void);
void* BluetoothEnableIdleTimer(void);
void* BluetoothHCIAcceptSynchronousConnectionRequest(void);
void* BluetoothHCIChangeConnectionPacketType(void);
void* BluetoothHCIControllerGeneralInterestNotification(void);
void* BluetoothHCIControllerPublished(void);
void* BluetoothHCIControllerSupportsSleep(void);
void* BluetoothHCIDecodeError(void);
void* BluetoothHCIDecodeIOReturnError(void);
void* BluetoothHCIDisconnect(void);
void* BluetoothHCIDispatchUserClientRoutine(void);
void* BluetoothHCIDumpStats(void);
void* BluetoothHCIEnhancedAcceptSynchronousConnectionRequest(void);
void* BluetoothHCIEnhancedSetupSynchronousConnection(void);
void* BluetoothHCIGetAsyncNotificationPort(void);
void* BluetoothHCIGetSynchronousConnectionPacketType(void);
void* BluetoothHCIGetTransportHardwareStatus(void);
void* BluetoothHCIGetTransportInfo(void);
void* BluetoothHCIKillAllPendingRequests(void);
void* BluetoothHCILMPLoggingEnabled(void);
void* BluetoothHCIRejectSynchronousConnectionRequest(void);
void* BluetoothHCIRequestCreate(void);
void* BluetoothHCIRequestDelete(void);
void* BluetoothHCIResetHappened(void);
void* BluetoothHCIResetTransportHardwareStatus(void);
void* BluetoothHCISendRawACLData(void);
void* BluetoothHCISendRawCommand(void);
void* BluetoothHCISetAllowedChannels(void);
void* BluetoothHCISetDefaultChannelSettings(void);
void* BluetoothHCISetDefaultL2CAPChannelSettings(void);
void* BluetoothHCISetupAsyncNotifications(void);
void* BluetoothHCISetupSynchronousConnection(void);
void* BluetoothHCISetupUserClient(void);
void* BluetoothHCISwitchToSelectedHostController(void);
void* BluetoothHCITearDownUserClient(void);
void* BluetoothHCIToggleLMPLogging(void);
void* BluetoothHCIToggleSCOConnection(void);
void* BluetoothHCIToggleeSCOEV3Connection(void);
void* BluetoothHCIToggleeSCOEV4Connection(void);
void* BluetoothHCIToggleeSCOEV5Connection(void);
void* BluetoothHCIVendorCommand(void);
void* BluetoothHCIWriteLinkPolicySettings(void);
void* BluetoothHCIWritePageTimeout(void);
void* BluetoothLECreateConnection(void);
void* BluetoothSetBTLP(void);
void* BluetoothSetBTPD(void);
void* BluetoothSetBTPU(void);
void* BluetoothSetBTRB(void);
void* BluetoothSetBTRS(void);
void* BluetoothSetIdleTimer(void);
void* BluetoothSetIdleTimerInNVRAM(void);
void* BluetoothUpdateFirmware(void);
void* BluetoothValidSleepType(void);
void* CStringAppend(void);
void* ClearBluetoothHCIResetHappened(void);
void* ConvertPStringToUnicode(void);
void* ConvertUnicodeToPString(void);
void* CopyCToPascalString(void);
void* CreateHIDDeviceInterface(void);
void* DeviceConnectedCallback(void);
void* DeviceDisconnectedCallback(void);
void* DumpHeaderBytes(void);
void* ElementCookieForUsage(void);
void* EventServiceConnectedCallback(void);
void* EventServiceDisconnectedCallback(void);
void* EventServiceInterestCallback(void);
void* FSAppendAppleSingleEncoded(void);
void* FSAppleSingleDecode(void);
void* FSAppleSingleDecodeData(void);
void* FSAppleSingleEncode(void);
void* FSArchiveAppendItem(void);
void* FSCopyForkData(void);
void* FSCreateAppleArchive(void);
void* FSCreateArchive(void);
void* FSCreateFileBuffer(void);
void* FSCreateUniqueArchive(void);
void* FSCreateUniqueFile(void);
void* FSCreateUniqueSpecialFolderArchive(void);
void* FSCreateUniquelyNamedAppleArchive(void);
void* FSDeleteFileBuffer(void);
void* FSExists(void);
void* FSExpandAppleArchive(void);
void* FSExpandArchive(void);
void* FSMakeFSRef(void);
void* FSMakeUniqueName(void);
void* FSNeedsArchiving(void);
void* FSReadForkSkip(void);
void* FSRefToNSStringPath(void);
void* FileHasResourceFork(void);
void* FileHasTypeAndCreator(void);
void* GetGMTDelta(void);
void* HCreateFile(void);
void* HExists(void);
void* HIDDeviceForIOBluetoothDevice(void);
void* HMakeFSRef(void);
void* HMakeUniqueName(void);
void* HostController_AsyncHCIEventsNotificationHandler(void);
void* IOBluetoothAddAllowedIncomingL2CAPChannel(void);
void* IOBluetoothAddAllowedIncomingRFCOMMChannel(void);
void* IOBluetoothAddPANDevice(void);
void* IOBluetoothAddSCOAudioDevice(void);
void* IOBluetoothAddSecureIncomingRFCOMMChannel(void);
void* IOBluetoothAddServiceDict(void);
void* IOBluetoothAllowRoleSwitchForDevice(void);
void* IOBluetoothAudioChange(void);
void* IOBluetoothBroadcomSchedulerWorkaround(void);
void* IOBluetoothCFStringFromDeviceAddress(void);
void* IOBluetoothCFStringToDeviceAddress(void);
void* IOBluetoothCSRLibAccessToPSKey(void);
void* IOBluetoothCSRLibBCCMDGetNewSequenceNumber(void);
void* IOBluetoothCSRLibClearAllPSKeys(void);
void* IOBluetoothCSRLibClearPSKey(void);
void* IOBluetoothCSRLibGetBCCMDMessageLen(void);
void* IOBluetoothCSRLibGetBCCMDMessageNumberOfWords(void);
void* IOBluetoothCSRLibHCISendBCCMDMessage(void);
void* IOBluetoothCSRLibHandleBCCMDData(void);
void* IOBluetoothCSRLibReadPSKey(void);
void* IOBluetoothCSRLibSendBCCMDMessage(void);
void* IOBluetoothCSRLibSetPSCallback(void);
void* IOBluetoothCSRLibWritePSKey(void);
void* IOBluetoothClearCachedValues(void);
void* IOBluetoothClearIncomingChannelRules(void);
void* IOBluetoothClearRunInactivityTimerInNVRAM(void);
void* IOBluetoothConfigureHIDDevice(void);
void* IOBluetoothConsoleUserID(void);
void* IOBluetoothConsoleUserName(void);
void* IOBluetoothDeviceCloseConnection(void);
void* IOBluetoothDeviceCreateWithAddress(void);
void* IOBluetoothDeviceCreateWithService(void);
void* IOBluetoothDeviceGetAddress(void);
void* IOBluetoothDeviceGetAddressString(void);
void* IOBluetoothDeviceGetConfigurableTypes(void);
void* IOBluetoothDeviceGetConfiguredTypes(void);
void* IOBluetoothDeviceGetDeviceClassMajor(void);
void* IOBluetoothDeviceGetLastServicesUpdate(void);
void* IOBluetoothDeviceGetName(void);
void* IOBluetoothDeviceGetNameOrAddress(void);
void* IOBluetoothDeviceGetServiceRecordForUUID(void);
void* IOBluetoothDeviceGetServices(void);
void* IOBluetoothDeviceInquiryClearFoundDevices(void);
void* IOBluetoothDeviceInquiryCreateWithCallbackRefCon(void);
void* IOBluetoothDeviceInquiryDelete(void);
void* IOBluetoothDeviceInquiryGetFoundDevices(void);
void* IOBluetoothDeviceInquiryGetInquiryLength(void);
void* IOBluetoothDeviceInquiryGetUpdateNewDeviceNames(void);
void* IOBluetoothDeviceInquiryGetUserRefCon(void);
void* IOBluetoothDeviceInquirySetCompleteCallback(void);
void* IOBluetoothDeviceInquirySetDeviceFoundCallback(void);
void* IOBluetoothDeviceInquirySetDeviceNameUpdatedCallback(void);
void* IOBluetoothDeviceInquirySetInquiryLength(void);
void* IOBluetoothDeviceInquirySetSearchCriteria(void);
void* IOBluetoothDeviceInquirySetStartedCallback(void);
void* IOBluetoothDeviceInquirySetUpdateNewDeviceNames(void);
void* IOBluetoothDeviceInquirySetUpdatingNamesStartedCallback(void);
void* IOBluetoothDeviceInquirySetUserRefCon(void);
void* IOBluetoothDeviceInquiryStart(void);
void* IOBluetoothDeviceInquiryStop(void);
void* IOBluetoothDeviceIsConnected(void);
void* IOBluetoothDeviceOpenConnection(void);
void* IOBluetoothDeviceOpenConnectionWithOptions(void);
void* IOBluetoothDeviceOpenL2CAPChannelAsync(void);
void* IOBluetoothDeviceOpenL2CAPChannelAsyncWithConfiguration(void);
void* IOBluetoothDeviceOpenL2CAPChannelSync(void);
void* IOBluetoothDeviceOpenL2CAPChannelSyncWithConfiguration(void);
void* IOBluetoothDevicePerformSDPQuery(void);
void* IOBluetoothDeviceRegisterForDisconnectNotification(void);
void* IOBluetoothDeviceRemoteNameRequest(void);
void* IOBluetoothDeviceRemoteNameRequestWithTimeout(void);
void* IOBluetoothDeviceServiceAdded(void);
void* IOBluetoothDisallowRoleSwitchForDevice(void);
void* IOBluetoothEnableConsoleUserNotifications(void);
void* IOBluetoothFileLogHelper(void);
void* IOBluetoothFileLogHelperFlushFileCache(void);
void* IOBluetoothFindNumberOfRegistryEntriesOfClassName(void);
void* IOBluetoothFrameworkInit(void);
void* IOBluetoothFrameworkNotificationPort(void);
void* IOBluetoothGainAdministrationPrivileges(void);
void* IOBluetoothGetAddressFromService(void);
void* IOBluetoothGetAllOpenL2CAPChannelsForPSM(void);
void* IOBluetoothGetAllOpenRFCOMMChannelsForID(void);
void* IOBluetoothGetAllowedIncomingRFCOMMChannels(void);
void* IOBluetoothGetBluetoothHCIVersionString(void);
void* IOBluetoothGetBluetoothStackVersionString(void);
void* IOBluetoothGetCachedValues(void);
void* IOBluetoothGetChipsetID(void);
void* IOBluetoothGetChipsetString(void);
void* IOBluetoothGetConfiguredDeviceAddresses(void);
void* IOBluetoothGetConfiguredDevices(void);
void* IOBluetoothGetLocalServices(void);
void* IOBluetoothGetObjectIDFromArguments(void);
void* IOBluetoothGetObjectIDFromIOService(void);
void* IOBluetoothGetPANConnectionState(void);
void* IOBluetoothGetPairedDevices(void);
void* IOBluetoothGetUniqueFileNameAndPath(void);
void* IOBluetoothGetUniqueFileNameAndWithCFStringPath(void);
void* IOBluetoothGetVersion(void);
void* IOBluetoothHCIControllerDisableL2CAPKernelDrivers(void);
void* IOBluetoothIgnoreHIDDevice(void);
void* IOBluetoothIsBluetoothSecured(void);
void* IOBluetoothIsConfiguredHIDDevice(void);
void* IOBluetoothIsFileAppleDesignatedPIMData(void);
void* IOBluetoothIsFileAppleDesignatedPIMDataAtCFStringPath(void);
void* IOBluetoothIsMachinePortable(void);
void* IOBluetoothL2CAPChannelCloseChannel(void);
void* IOBluetoothL2CAPChannelGetIncomingMTU(void);
void* IOBluetoothL2CAPChannelGetOutgoingMTU(void);
void* IOBluetoothL2CAPChannelRegisterForChannelCloseNotification(void);
void* IOBluetoothL2CAPChannelRegisterIncomingEventListener(void);
void* IOBluetoothL2CAPChannelRegisterIncomingEventListenerWithConfiguration(void);
void* IOBluetoothL2CAPChannelWrite(void);
void* IOBluetoothL2CAPChannelWriteAsync(void);
void* IOBluetoothLocalDeviceAvailable(void);
void* IOBluetoothLocalDeviceGetConfigState(void);
void* IOBluetoothLocalDeviceGetPowerState(void);
void* IOBluetoothLocalDeviceGetUSBProductID(void);
void* IOBluetoothLocalDeviceGetUSBVendorID(void);
void* IOBluetoothLocalDeviceReadName(void);
void* IOBluetoothLocalDeviceSetDiscoverable(void);
void* IOBluetoothLocalDeviceSetPowerState(void);
void* IOBluetoothLocalDeviceSupportsPowerOff(void);
void* IOBluetoothLogHelper(void);
void* IOBluetoothNSStringFromDeviceAddress(void);
void* IOBluetoothNSStringFromDeviceAddressColon(void);
void* IOBluetoothNSStringToDeviceAddress(void);
void* IOBluetoothNotificationLibAddHCIControllerRunLoopNotification(void);
void* IOBluetoothNotificationLibAddNotificationForClassName(void);
void* IOBluetoothNotificationLibCheckForExistingHCIControllersAndNotify(void);
void* IOBluetoothNotificationLibDoHCIClientNotification(void);
void* IOBluetoothNotificationLibHCIControllerInterestedCallback(void);
void* IOBluetoothNotificationLibHCIControllerPublishedCallback(void);
void* IOBluetoothNotificationLibHCIRawEventHandler(void);
void* IOBluetoothNotificationLibHCIRawEventsSetup(void);
void* IOBluetoothNotificationLibNotificationCreate(void);
void* IOBluetoothNotificationLibNotificationDelete(void);
void* IOBluetoothNotificationLibSetup(void);
void* IOBluetoothNumberOfAvailableHIDDevices(void);
void* IOBluetoothNumberOfKeyboardHIDDevices(void);
void* IOBluetoothNumberOfPointingHIDDevices(void);
void* IOBluetoothNumberOfTabletHIDDevices(void);
void* IOBluetoothOBEXSessionCreateWithIOBluetoothDeviceRefAndChannelNumber(void);
void* IOBluetoothOBEXSessionCreateWithIOBluetoothSDPServiceRecordRef(void);
void* IOBluetoothOBEXSessionCreateWithIncomingIOBluetoothRFCOMMChannel(void);
void* IOBluetoothOBEXSessionOpenTransportConnection(void);
void* IOBluetoothOSLogHelper(void);
void* IOBluetoothObjectRelease(void);
void* IOBluetoothObjectRetain(void);
void* IOBluetoothObjectServiceTerminated(void);
void* IOBluetoothPackData(void);
void* IOBluetoothPackDataList(void);
void* IOBluetoothPreferenceAddFavoriteAddressString(void);
void* IOBluetoothPreferenceBuildPrefsServerConnection(void);
void* IOBluetoothPreferenceGetAutoSeekForKeyboard(void);
void* IOBluetoothPreferenceGetAutoSeekForPointingDevice(void);
void* IOBluetoothPreferenceGetBrowseConnectionHandling(void);
void* IOBluetoothPreferenceGetControllerPowerState(void);
void* IOBluetoothPreferenceGetDiscoverableState(void);
void* IOBluetoothPreferenceGetFTPRequiresPairing(void);
void* IOBluetoothPreferenceGetFavoriteAddressStrings(void);
void* IOBluetoothPreferenceGetOBEXFTPRootFolderLocation(void);
void* IOBluetoothPreferenceGetOBEXFileExchangeSaveToLocation(void);
void* IOBluetoothPreferenceGetOBEXFileHandling(void);
void* IOBluetoothPreferenceGetOBEXFileTransferEnabled(void);
void* IOBluetoothPreferenceGetOBEXOtherDataDisposition(void);
void* IOBluetoothPreferenceGetOPPRequiresPairing(void);
void* IOBluetoothPreferenceGetRemoteWakeEnabled(void);
void* IOBluetoothPreferenceGetServicesEnabled(void);
void* IOBluetoothPreferenceIsFavoriteAddressString(void);
void* IOBluetoothPreferenceRemoveFavoriteAddressString(void);
void* IOBluetoothPreferenceSetAutoSeekForKeyboard(void);
void* IOBluetoothPreferenceSetAutoSeekForPointingDevice(void);
void* IOBluetoothPreferenceSetBluetoothPrefPaneOpen(void);
void* IOBluetoothPreferenceSetBrowseConnectionHandling(void);
void* IOBluetoothPreferenceSetControllerPowerState(void);
void* IOBluetoothPreferenceSetDiscoverableState(void);
void* IOBluetoothPreferenceSetFTPRequiresPairing(void);
void* IOBluetoothPreferenceSetOBEXFTPRootFolderLocation(void);
void* IOBluetoothPreferenceSetOBEXFileExchangeSaveToLocation(void);
void* IOBluetoothPreferenceSetOBEXFileHandling(void);
void* IOBluetoothPreferenceSetOBEXFileTransferEnabled(void);
void* IOBluetoothPreferenceSetOBEXOtherDataDisposition(void);
void* IOBluetoothPreferenceSetOPPRequiresPairing(void);
void* IOBluetoothPreferenceSetRemoteWakeEnabled(void);
void* IOBluetoothPreferenceSetServicesEnabled(void);
void* IOBluetoothPreferencesAvailable(void);
void* IOBluetoothPreferencesGetValueForKey(void);
void* IOBluetoothPreferencesSetValueForKey(void);
void* IOBluetoothRFCOMMChannelIsInitiatorLocal(void);
void* IOBluetoothRFCOMMChannelRegisterForChannelCloseNotification(void);
void* IOBluetoothRecentDevices(void);
void* IOBluetoothRegisterForDeviceConnectNotifications(void);
void* IOBluetoothRegisterForFilteredL2CAPChannelOpenNotifications(void);
void* IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications(void);
void* IOBluetoothRegisterForL2CAPChannelOpenNotifications(void);
void* IOBluetoothRegisterForNotifications(void);
void* IOBluetoothRegisterForRFCOMMChannelOpenNotifications(void);
void* IOBluetoothRemoveAllowedIncomingL2CAPChannel(void);
void* IOBluetoothRemoveAllowedIncomingRFCOMMChannel(void);
void* IOBluetoothRemoveCachedValue(void);
void* IOBluetoothRemoveConfiguredDevice(void);
void* IOBluetoothRemoveIgnoredHIDDevice(void);
void* IOBluetoothRemoveLinkKeyForDevice(void);
void* IOBluetoothRemovePANDevice(void);
void* IOBluetoothRemoveRegistrationForNotifications(void);
void* IOBluetoothRemoveSCOAudioDevice(void);
void* IOBluetoothRemoveServiceWithRecordHandle(void);
void* IOBluetoothRingBufferInit(void);
void* IOBluetoothRingBufferRead(void);
void* IOBluetoothRingBufferReadAtOffset(void);
void* IOBluetoothRingBufferRelease(void);
void* IOBluetoothRingBufferWrite(void);
void* IOBluetoothRingBufferWriteAtOffset(void);
void* IOBluetoothSDPDataElementContainsDataElement(void);
void* IOBluetoothSDPDataElementGetArrayValue(void);
void* IOBluetoothSDPDataElementGetDataValue(void);
void* IOBluetoothSDPDataElementGetNumberValue(void);
void* IOBluetoothSDPDataElementGetSize(void);
void* IOBluetoothSDPDataElementGetSizeDescriptor(void);
void* IOBluetoothSDPDataElementGetStringValue(void);
void* IOBluetoothSDPDataElementGetTypeDescriptor(void);
void* IOBluetoothSDPDataElementGetUUIDValue(void);
void* IOBluetoothSDPDataElementIsEqualToDataElement(void);
void* IOBluetoothSDPServiceRecordGetAttributeDataElement(void);
void* IOBluetoothSDPUUIDCreateUUID16(void);
void* IOBluetoothSDPUUIDGetBytes(void);
void* IOBluetoothSDPUUIDGetLength(void);
void* IOBluetoothSDPUUIDIsEqualToUUID(void);
void* IOBluetoothSecureBluetooth(void);
void* IOBluetoothSelectBTPD(void);
void* IOBluetoothSelectBTPU(void);
void* IOBluetoothSelectBTRS(void);
void* IOBluetoothSelectReset(void);
void* IOBluetoothSetPANConnectionState(void);
void* IOBluetoothSetRunInactivityTimer(void);
void* IOBluetoothSetRunInactivityTimerInNVRAM(void);
void* IOBluetoothShouldRunInactivityTimer(void);
void* IOBluetoothSystemHasOnlyBluetoothPointingDevices(void);
void* IOBluetoothSystemModelIdentifier(void);
void* IOBluetoothTearDownPreferencesServer(void);
void* IOBluetoothUnpackData(void);
void* IOBluetoothUnpackDataList(void);
void* IOBluetoothUnregisterHIDDevice(void);
void* IOBluetoothUpdateSystemActivity(void);
void* IOBluetoothUserNotificationUnregister(void);
void* ItemAtPathNeedsArchiving(void);
void* NSStringPathResolveAliasesAndLinks(void);
void* NSStringPathToCFURL(void);
void* NSStringPathToFSRef(void);
void* OBEXAddApplicationParameterHeader(void);
void* OBEXAddAuthorizationChallengeHeader(void);
void* OBEXAddAuthorizationResponseHeader(void);
void* OBEXAddBodyHeader(void);
void* OBEXAddByteSequenceHeader(void);
void* OBEXAddConnectionIDHeader(void);
void* OBEXAddCountHeader(void);
void* OBEXAddDescriptionHeader(void);
void* OBEXAddHTTPHeader(void);
void* OBEXAddImageDescriptorHeader(void);
void* OBEXAddImageHandleHeader(void);
void* OBEXAddLengthHeader(void);
void* OBEXAddNameHeader(void);
void* OBEXAddObjectClassHeader(void);
void* OBEXAddTargetHeader(void);
void* OBEXAddTime4ByteHeader(void);
void* OBEXAddTimeISOHeader(void);
void* OBEXAddTypeHeader(void);
void* OBEXAddUserDefinedHeader(void);
void* OBEXAddWhoHeader(void);
void* OBEXCreateVCalendar(void);
void* OBEXCreateVCard(void);
void* OBEXCreateVEvent(void);
void* OBEXFolderListingCreateFromFile(void);
void* OBEXFolderListingGetObjectArray(void);
void* OBEXFolderListingPrintDictionary(void);
void* OBEXGetHeaders(void);
void* OBEXHeadersToBytes(void);
void* OBEXPatchXMLData(void);
void* OBEXSessionAbort(void);
void* OBEXSessionAbortResponse(void);
void* OBEXSessionConnect(void);
void* OBEXSessionConnectResponse(void);
void* OBEXSessionDelete(void);
void* OBEXSessionDisconnect(void);
void* OBEXSessionDisconnectResponse(void);
void* OBEXSessionGet(void);
void* OBEXSessionGetAvailableCommandPayloadLength(void);
void* OBEXSessionGetAvailableCommandResponsePayloadLength(void);
void* OBEXSessionGetMaxPacketLength(void);
void* OBEXSessionGetResponse(void);
void* OBEXSessionHasOpenOBEXConnection(void);
void* OBEXSessionPut(void);
void* OBEXSessionPutResponse(void);
void* OBEXSessionSetPath(void);
void* OBEXSessionSetPathResponse(void);
void* OBEXSessionSetServerCallback(void);
void* OBEXSetDebugLogVerbosity(void);
void* PStringAppend(void);
void* PStringAppendChar(void);
void* PStringAppendNumber(void);
void* PStringAppendText(void);
void* PStringCopy(void);
void* PStringToUnicodeSimple(void);
void* PackData(void);
void* PackDataList(void);
void* ParseOBEXPacket(void);
void* ParseServerConnectResponse(void);
void* PostNotification(void);
void* QueueNonEmptyCallback(void);
void* RegistryObject_ConnectedCallback(void);
void* RegistryObject_DisconnectedCallback(void);
void* ReturnAllCurrentDevices(void);
void* ReturnAllCurrentL2Channels(void);
void* ReturnAllCurrentRFCOMMChannels(void);
void* ServiceInterestCallback(void);
void* SetupDevicePublicationNotifications(void);
void* StringByRemovingCharactersInString(void);
void* SystemPowerNotificationLib_SleepNotificationCallback(void);
void* TextFindExtension(void);
void* UInt16ToBCCMD16(void);
void* UInt32ToBCCMD32(void);
void* UInt8ToBCCMD16(void);
void* UTCDateTimeToAppleSingleSeconds(void);
void* UTF8ToUnicode(void);
void* UnicodeAppend(void);
void* UnicodeFindFilenameExtension(void);
void* UnicodeIsAlpha(void);
void* UnicodeIsPrint(void);
void* UnicodeReverseCharSearch(void);
void* UnicodeToUTF8(void);
void* UnpackData(void);
void* UnpackDataList(void);
void* UnpackExtendedInquiryResponse(void);
void* _IOBluetoothRingBufferBytesAvailable(void);
void* _IOBluetoothRingBufferBytesInBuffer(void);
void* _IOBluetoothRingBufferSequentialBytesAvailable(void);
void* _IOBluetoothRingBufferSequentialBytesInBuffer(void);
void* _recurseElements(void);
void* btNotificationAddNotificationForClass(void);
void* btNotificationDevicePublished(void);
void* btNotificationDeviceTerminated(void);
void* btNotificationL2ChannelPublished(void);
void* btNotificationL2ChannelTerminated(void);
void* btNotificationRFCOMMChannelPublished(void);
void* btNotificationRFCOMMChannelTerminated(void);
void* findServiceWithObjectID(void);
void* internetSharingIsEnabledForBluetooth(void);
void* memcpySwap(void);
void* memrchr(void);
void* newConnectionShowedUp(void);
void* sendDaemonXPCMessageWithCFArrayAndReply(void);
void* sendDaemonXPCMessageWithCFObject(void);
void* sendDaemonXPCMessageWithNSArray(void);
void* sendDaemonXPCMessageWithReply(void);
void* sendDaemonXPCMessageWithReplySync(void);
void* sendRawHCIRequest(void);
void* servicePublished(void);
void* shouldSubmitToSampling(void);
void* systemContinuityCapable(void);
void* unpackEIRorAdvertisementData(void);
void* waitForMatchingService(void);

#endif
